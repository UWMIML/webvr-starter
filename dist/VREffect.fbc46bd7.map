{"version":3,"sources":["node_modules/three/examples/js/effects/VREffect.js"],"names":[],"mappingsfile":"VREffect.fbc46bd7.map","sourceRoot":"..","sourcesContent":["/**\n * @author dmarcos / https://github.com/dmarcos\n * @author mrdoob / http://mrdoob.com\n *\n * WebVR Spec: http://mozvr.github.io/webvr-spec/webvr.html\n *\n * Firefox: http://mozvr.com/downloads/\n * Chromium: https://webvr.info/get-chrome\n *\n */\n\nTHREE.VREffect = function( renderer, onError ) {\n\n\tvar vrDisplay, vrDisplays;\n\tvar eyeTranslationL = new THREE.Vector3();\n\tvar eyeTranslationR = new THREE.Vector3();\n\tvar renderRectL, renderRectR;\n\n\tvar frameData = null;\n\n\tif ( 'VRFrameData' in window ) {\n\n\t\tframeData = new window.VRFrameData();\n\n\t}\n\n\tfunction gotVRDisplays( displays ) {\n\n\t\tvrDisplays = displays;\n\n\t\tif ( displays.length > 0 ) {\n\n\t\t\tvrDisplay = displays[ 0 ];\n\n\t\t} else {\n\n\t\t\tif ( onError ) onError( 'HMD not available' );\n\n\t\t}\n\n\t}\n\n\tif ( navigator.getVRDisplays ) {\n\n\t\tnavigator.getVRDisplays().then( gotVRDisplays ).catch( function() {\n\n\t\t\tconsole.warn( 'THREE.VREffect: Unable to get VR Displays' );\n\n\t\t} );\n\n\t}\n\n\t//\n\n\tthis.isPresenting = false;\n\tthis.scale = 1;\n\n\tvar scope = this;\n\n\tvar rendererSize = renderer.getSize();\n\tvar rendererUpdateStyle = false;\n\tvar rendererPixelRatio = renderer.getPixelRatio();\n\n\tthis.getVRDisplay = function() {\n\n\t\treturn vrDisplay;\n\n\t};\n\n\tthis.setVRDisplay = function( value ) {\n\n\t\tvrDisplay = value;\n\n\t};\n\n\tthis.getVRDisplays = function() {\n\n\t\tconsole.warn( 'THREE.VREffect: getVRDisplays() is being deprecated.' );\n\t\treturn vrDisplays;\n\n\t};\n\n\tthis.setSize = function( width, height, updateStyle ) {\n\n\t\trendererSize = { width: width, height: height };\n\t\trendererUpdateStyle = updateStyle;\n\n\t\tif ( scope.isPresenting ) {\n\n\t\t\tvar eyeParamsL = vrDisplay.getEyeParameters( 'left' );\n\t\t\trenderer.setPixelRatio( 1 );\n\t\t\trenderer.setSize( eyeParamsL.renderWidth * 2, eyeParamsL.renderHeight, false );\n\n\t\t} else {\n\n\t\t\trenderer.setPixelRatio( rendererPixelRatio );\n\t\t\trenderer.setSize( width, height, updateStyle );\n\n\t\t}\n\n\t};\n\n\t// VR presentation\n\n\tvar canvas = renderer.domElement;\n\tvar defaultLeftBounds = [ 0.0, 0.0, 0.5, 1.0 ];\n\tvar defaultRightBounds = [ 0.5, 0.0, 0.5, 1.0 ];\n\n\tfunction onVRDisplayPresentChange() {\n\n\t\tvar wasPresenting = scope.isPresenting;\n\t\tscope.isPresenting = vrDisplay !== undefined && vrDisplay.isPresenting;\n\n\t\tif ( scope.isPresenting ) {\n\n\t\t\tvar eyeParamsL = vrDisplay.getEyeParameters( 'left' );\n\t\t\tvar eyeWidth = eyeParamsL.renderWidth;\n\t\t\tvar eyeHeight = eyeParamsL.renderHeight;\n\n\t\t\tif ( ! wasPresenting ) {\n\n\t\t\t\trendererPixelRatio = renderer.getPixelRatio();\n\t\t\t\trendererSize = renderer.getSize();\n\n\t\t\t\trenderer.setPixelRatio( 1 );\n\t\t\t\trenderer.setSize( eyeWidth * 2, eyeHeight, false );\n\n\t\t\t}\n\n\t\t} else if ( wasPresenting ) {\n\n\t\t\trenderer.setPixelRatio( rendererPixelRatio );\n\t\t\trenderer.setSize( rendererSize.width, rendererSize.height, rendererUpdateStyle );\n\n\t\t}\n\n\t}\n\n\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\n\n\tthis.setFullScreen = function( boolean ) {\n\n\t\treturn new Promise( function( resolve, reject ) {\n\n\t\t\tif ( vrDisplay === undefined ) {\n\n\t\t\t\treject( new Error( 'No VR hardware found.' ) );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( scope.isPresenting === boolean ) {\n\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( boolean ) {\n\n\t\t\t\tresolve( vrDisplay.requestPresent( [ { source: canvas } ] ) );\n\n\t\t\t} else {\n\n\t\t\t\tresolve( vrDisplay.exitPresent() );\n\n\t\t\t}\n\n\t\t} );\n\n\t};\n\n\tthis.requestPresent = function() {\n\n\t\treturn this.setFullScreen( true );\n\n\t};\n\n\tthis.exitPresent = function() {\n\n\t\treturn this.setFullScreen( false );\n\n\t};\n\n\tthis.requestAnimationFrame = function( f ) {\n\n\t\tif ( vrDisplay !== undefined ) {\n\n\t\t\treturn vrDisplay.requestAnimationFrame( f );\n\n\t\t} else {\n\n\t\t\treturn window.requestAnimationFrame( f );\n\n\t\t}\n\n\t};\n\n\tthis.cancelAnimationFrame = function( h ) {\n\n\t\tif ( vrDisplay !== undefined ) {\n\n\t\t\tvrDisplay.cancelAnimationFrame( h );\n\n\t\t} else {\n\n\t\t\twindow.cancelAnimationFrame( h );\n\n\t\t}\n\n\t};\n\n\tthis.submitFrame = function() {\n\n\t\tif ( vrDisplay !== undefined && scope.isPresenting ) {\n\n\t\t\tvrDisplay.submitFrame();\n\n\t\t}\n\n\t};\n\n\tthis.autoSubmitFrame = true;\n\n\t// render\n\n\tvar cameraL = new THREE.PerspectiveCamera();\n\tcameraL.layers.enable( 1 );\n\n\tvar cameraR = new THREE.PerspectiveCamera();\n\tcameraR.layers.enable( 2 );\n\n\tthis.render = function( scene, camera, renderTarget, forceClear ) {\n\n\t\tif ( vrDisplay && scope.isPresenting ) {\n\n\t\t\tvar autoUpdate = scene.autoUpdate;\n\n\t\t\tif ( autoUpdate ) {\n\n\t\t\t\tscene.updateMatrixWorld();\n\t\t\t\tscene.autoUpdate = false;\n\n\t\t\t}\n\n\t\t\tvar eyeParamsL = vrDisplay.getEyeParameters( 'left' );\n\t\t\tvar eyeParamsR = vrDisplay.getEyeParameters( 'right' );\n\n\t\t\teyeTranslationL.fromArray( eyeParamsL.offset );\n\t\t\teyeTranslationR.fromArray( eyeParamsR.offset );\n\n\t\t\tif ( Array.isArray( scene ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.VREffect.render() no longer supports arrays. Use object.layers instead.' );\n\t\t\t\tscene = scene[ 0 ];\n\n\t\t\t}\n\n\t\t\t// When rendering we don't care what the recommended size is, only what the actual size\n\t\t\t// of the backbuffer is.\n\t\t\tvar size = renderer.getSize();\n\t\t\tvar layers = vrDisplay.getLayers();\n\t\t\tvar leftBounds;\n\t\t\tvar rightBounds;\n\n\t\t\tif ( layers.length ) {\n\n\t\t\t\tvar layer = layers[ 0 ];\n\n\t\t\t\tleftBounds = layer.leftBounds !== null && layer.leftBounds.length === 4 ? layer.leftBounds : defaultLeftBounds;\n\t\t\t\trightBounds = layer.rightBounds !== null && layer.rightBounds.length === 4 ? layer.rightBounds : defaultRightBounds;\n\n\t\t\t} else {\n\n\t\t\t\tleftBounds = defaultLeftBounds;\n\t\t\t\trightBounds = defaultRightBounds;\n\n\t\t\t}\n\n\t\t\trenderRectL = {\n\t\t\t\tx: Math.round( size.width * leftBounds[ 0 ] ),\n\t\t\t\ty: Math.round( size.height * leftBounds[ 1 ] ),\n\t\t\t\twidth: Math.round( size.width * leftBounds[ 2 ] ),\n\t\t\t\theight: Math.round( size.height * leftBounds[ 3 ] )\n\t\t\t};\n\t\t\trenderRectR = {\n\t\t\t\tx: Math.round( size.width * rightBounds[ 0 ] ),\n\t\t\t\ty: Math.round( size.height * rightBounds[ 1 ] ),\n\t\t\t\twidth: Math.round( size.width * rightBounds[ 2 ] ),\n\t\t\t\theight: Math.round( size.height * rightBounds[ 3 ] )\n\t\t\t};\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\trenderer.setRenderTarget( renderTarget );\n\t\t\t\trenderTarget.scissorTest = true;\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setRenderTarget( null );\n\t\t\t\trenderer.setScissorTest( true );\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) renderer.clear();\n\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t\tcamera.matrixWorld.decompose( cameraL.position, cameraL.quaternion, cameraL.scale );\n\t\t\tcamera.matrixWorld.decompose( cameraR.position, cameraR.quaternion, cameraR.scale );\n\n\t\t\tvar scale = this.scale;\n\t\t\tcameraL.translateOnAxis( eyeTranslationL, scale );\n\t\t\tcameraR.translateOnAxis( eyeTranslationR, scale );\n\n\t\t\tif ( vrDisplay.getFrameData ) {\n\n\t\t\t\tvrDisplay.depthNear = camera.near;\n\t\t\t\tvrDisplay.depthFar = camera.far;\n\n\t\t\t\tvrDisplay.getFrameData( frameData );\n\n\t\t\t\tcameraL.projectionMatrix.elements = frameData.leftProjectionMatrix;\n\t\t\t\tcameraR.projectionMatrix.elements = frameData.rightProjectionMatrix;\n\n\t\t\t} else {\n\n\t\t\t\tcameraL.projectionMatrix = fovToProjection( eyeParamsL.fieldOfView, true, camera.near, camera.far );\n\t\t\t\tcameraR.projectionMatrix = fovToProjection( eyeParamsR.fieldOfView, true, camera.near, camera.far );\n\n\t\t\t}\n\n\t\t\t// render left eye\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\trenderTarget.viewport.set( renderRectL.x, renderRectL.y, renderRectL.width, renderRectL.height );\n\t\t\t\trenderTarget.scissor.set( renderRectL.x, renderRectL.y, renderRectL.width, renderRectL.height );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setViewport( renderRectL.x, renderRectL.y, renderRectL.width, renderRectL.height );\n\t\t\t\trenderer.setScissor( renderRectL.x, renderRectL.y, renderRectL.width, renderRectL.height );\n\n\t\t\t}\n\t\t\trenderer.render( scene, cameraL, renderTarget, forceClear );\n\n\t\t\t// render right eye\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\trenderTarget.viewport.set( renderRectR.x, renderRectR.y, renderRectR.width, renderRectR.height );\n\t\t\t\trenderTarget.scissor.set( renderRectR.x, renderRectR.y, renderRectR.width, renderRectR.height );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setViewport( renderRectR.x, renderRectR.y, renderRectR.width, renderRectR.height );\n\t\t\t\trenderer.setScissor( renderRectR.x, renderRectR.y, renderRectR.width, renderRectR.height );\n\n\t\t\t}\n\t\t\trenderer.render( scene, cameraR, renderTarget, forceClear );\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\trenderTarget.viewport.set( 0, 0, size.width, size.height );\n\t\t\t\trenderTarget.scissor.set( 0, 0, size.width, size.height );\n\t\t\t\trenderTarget.scissorTest = false;\n\t\t\t\trenderer.setRenderTarget( null );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setViewport( 0, 0, size.width, size.height );\n\t\t\t\trenderer.setScissorTest( false );\n\n\t\t\t}\n\n\t\t\tif ( autoUpdate ) {\n\n\t\t\t\tscene.autoUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( scope.autoSubmitFrame ) {\n\n\t\t\t\tscope.submitFrame();\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Regular render mode if not HMD\n\n\t\trenderer.render( scene, camera, renderTarget, forceClear );\n\n\t};\n\n\tthis.dispose = function() {\n\n\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\n\n\t};\n\n\t//\n\n\tfunction fovToNDCScaleOffset( fov ) {\n\n\t\tvar pxscale = 2.0 / ( fov.leftTan + fov.rightTan );\n\t\tvar pxoffset = ( fov.leftTan - fov.rightTan ) * pxscale * 0.5;\n\t\tvar pyscale = 2.0 / ( fov.upTan + fov.downTan );\n\t\tvar pyoffset = ( fov.upTan - fov.downTan ) * pyscale * 0.5;\n\t\treturn { scale: [ pxscale, pyscale ], offset: [ pxoffset, pyoffset ] };\n\n\t}\n\n\tfunction fovPortToProjection( fov, rightHanded, zNear, zFar ) {\n\n\t\trightHanded = rightHanded === undefined ? true : rightHanded;\n\t\tzNear = zNear === undefined ? 0.01 : zNear;\n\t\tzFar = zFar === undefined ? 10000.0 : zFar;\n\n\t\tvar handednessScale = rightHanded ? - 1.0 : 1.0;\n\n\t\t// start with an identity matrix\n\t\tvar mobj = new THREE.Matrix4();\n\t\tvar m = mobj.elements;\n\n\t\t// and with scale/offset info for normalized device coords\n\t\tvar scaleAndOffset = fovToNDCScaleOffset( fov );\n\n\t\t// X result, map clip edges to [-w,+w]\n\t\tm[ 0 * 4 + 0 ] = scaleAndOffset.scale[ 0 ];\n\t\tm[ 0 * 4 + 1 ] = 0.0;\n\t\tm[ 0 * 4 + 2 ] = scaleAndOffset.offset[ 0 ] * handednessScale;\n\t\tm[ 0 * 4 + 3 ] = 0.0;\n\n\t\t// Y result, map clip edges to [-w,+w]\n\t\t// Y offset is negated because this proj matrix transforms from world coords with Y=up,\n\t\t// but the NDC scaling has Y=down (thanks D3D?)\n\t\tm[ 1 * 4 + 0 ] = 0.0;\n\t\tm[ 1 * 4 + 1 ] = scaleAndOffset.scale[ 1 ];\n\t\tm[ 1 * 4 + 2 ] = - scaleAndOffset.offset[ 1 ] * handednessScale;\n\t\tm[ 1 * 4 + 3 ] = 0.0;\n\n\t\t// Z result (up to the app)\n\t\tm[ 2 * 4 + 0 ] = 0.0;\n\t\tm[ 2 * 4 + 1 ] = 0.0;\n\t\tm[ 2 * 4 + 2 ] = zFar / ( zNear - zFar ) * - handednessScale;\n\t\tm[ 2 * 4 + 3 ] = ( zFar * zNear ) / ( zNear - zFar );\n\n\t\t// W result (= Z in)\n\t\tm[ 3 * 4 + 0 ] = 0.0;\n\t\tm[ 3 * 4 + 1 ] = 0.0;\n\t\tm[ 3 * 4 + 2 ] = handednessScale;\n\t\tm[ 3 * 4 + 3 ] = 0.0;\n\n\t\tmobj.transpose();\n\n\t\treturn mobj;\n\n\t}\n\n\tfunction fovToProjection( fov, rightHanded, zNear, zFar ) {\n\n\t\tvar DEG2RAD = Math.PI / 180.0;\n\n\t\tvar fovPort = {\n\t\t\tupTan: Math.tan( fov.upDegrees * DEG2RAD ),\n\t\t\tdownTan: Math.tan( fov.downDegrees * DEG2RAD ),\n\t\t\tleftTan: Math.tan( fov.leftDegrees * DEG2RAD ),\n\t\t\trightTan: Math.tan( fov.rightDegrees * DEG2RAD )\n\t\t};\n\n\t\treturn fovPortToProjection( fovPort, rightHanded, zNear, zFar );\n\n\t}\n\n};\n"]}